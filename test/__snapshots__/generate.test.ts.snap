// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches snapshots when invoked from a browser env 1`] = `
"import { NamedNode, Literal } from 'rdflib';

import { Shape } from 'shex-methods';

export type SolidProfileShape = {
  id: string; // the url of a node of this shape
  vcardName?: string; // The formatted name of a person. Example: John Smith
  foafName?: string; // An alternate way to define a person's name.
  hasAddress?: AddressShape | AddressShape[]; // The person's street address.
  hasEmail?: EmailShape | EmailShape[]; // The person's email.
  hasPhoto?: string; // A link to the person's photo
  img?: string; // Photo link but in string form
  hasTelephone?: PhoneNumberShape | PhoneNumberShape[]; // Person's telephone number
  phone?: string; // An alternative way to define a person's telephone number using a string
  organizationName?: string; // The name of the organization with which the person is affiliated
  role?: string; // The name of the person's role in their organization
  trustedApp?: TrustedAppShape | TrustedAppShape[]; // A list of app origins that are trusted by this user
  key?: RsaPublicKeyShape | RsaPublicKeyShape[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: string; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: string; // The user's preferences
  storage?: string | string[]; // The location of a Solid storage server related to this WebId
  account?: string; // The user's account
  privateTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for public access)
  knows?: string | string[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  vcardName?: string | Literal; // The formatted name of a person. Example: John Smith
  foafName?: string | Literal; // An alternate way to define a person's name.
  hasAddress?:
    | URL
    | NamedNode
    | AddressShapeCreateArgs
    | (URL | NamedNode | AddressShapeCreateArgs)[]; // The person's street address.
  hasEmail?:
    | URL
    | NamedNode
    | EmailShapeCreateArgs
    | (URL | NamedNode | EmailShapeCreateArgs)[]; // The person's email.
  hasPhoto?: URL | NamedNode; // A link to the person's photo
  img?: string | Literal; // Photo link but in string form
  hasTelephone?:
    | URL
    | NamedNode
    | PhoneNumberShapeCreateArgs
    | (URL | NamedNode | PhoneNumberShapeCreateArgs)[]; // Person's telephone number
  phone?: string | Literal; // An alternative way to define a person's telephone number using a string
  organizationName?: string | Literal; // The name of the organization with which the person is affiliated
  role?: string | Literal; // The name of the person's role in their organization
  trustedApp?:
    | URL
    | NamedNode
    | TrustedAppShapeCreateArgs
    | (URL | NamedNode | TrustedAppShapeCreateArgs)[]; // A list of app origins that are trusted by this user
  key?:
    | URL
    | NamedNode
    | RsaPublicKeyShapeCreateArgs
    | (URL | NamedNode | RsaPublicKeyShapeCreateArgs)[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: URL | NamedNode; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: URL | NamedNode; // The user's preferences
  storage?: URL | NamedNode | (URL | NamedNode)[]; // The location of a Solid storage server related to this WebId
  account?: URL | NamedNode; // The user's account
  privateTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for public access)
  knows?: URL | NamedNode | (URL | NamedNode)[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeUpdateArgs = Partial<SolidProfileShapeCreateArgs>;

export type AddressShape = {
  id: string; // the url of a node of this shape
  countryName?: string; // The name of the user's country of residence
  locality?: string; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string; // The user's postal code
  region?: string; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string; // The user's street address
};

export type AddressShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  countryName?: string | Literal; // The name of the user's country of residence
  locality?: string | Literal; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string | Literal; // The user's postal code
  region?: string | Literal; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string | Literal; // The user's street address
};

export type AddressShapeUpdateArgs = Partial<AddressShapeCreateArgs>;

export type EmailShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeUpdateArgs = Partial<EmailShapeCreateArgs>;

export type PhoneNumberShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeUpdateArgs = Partial<PhoneNumberShapeCreateArgs>;

export type TrustedAppShape = {
  id: string; // the url of a node of this shape
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: string; // The app origin the user trusts
};

export type TrustedAppShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: URL | NamedNode; // The app origin the user trusts
};

export type TrustedAppShapeUpdateArgs = Partial<TrustedAppShapeCreateArgs>;

export type RsaPublicKeyShape = {
  id: string; // the url of a node of this shape
  modulus: string; // RSA Modulus
  exponent: number; // RSA Exponent
};

export type RsaPublicKeyShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  modulus: string | Literal; // RSA Modulus
  exponent: number | Literal; // RSA Exponent
};

export type RsaPublicKeyShapeUpdateArgs = Partial<RsaPublicKeyShapeCreateArgs>;

export enum SolidProfileShapeType {
  SchemPerson = 'http://schema.org/Person',
  FoafPerson = 'http://xmlns.com/foaf/0.1/Person',
}

export enum EmailShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum PhoneNumberShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum ModeType {
  Append = 'http://www.w3.org/ns/auth/acl#Append',
  Control = 'http://www.w3.org/ns/auth/acl#Control',
  Read = 'http://www.w3.org/ns/auth/acl#Read',
  Write = 'http://www.w3.org/ns/auth/acl#Write',
}

export enum SolidProfileShapeContext {
  type = 'rdf:type',
  vcardName = 'vcard:name',
  foafName = 'foaf:name',
  hasAddress = 'vcard:hasAddress',
  hasEmail = 'vcard:hasEmail',
  hasPhoto = 'vcard:hasPhoto',
  img = 'foaf:img',
  hasTelephone = 'vcard:hasTelephone',
  phone = 'vcard:phone',
  organizationName = 'vcard:organizationName',
  role = 'vcard:role',
  trustedApp = 'acl:trustedApp',
  key = 'cert:key',
  inbox = 'ldp:inbox',
  preferencesFile = 'sp:preferencesFile',
  storage = 'sp:storage',
  account = 'solid:account',
  privateTypeIndex = 'solid:privateTypeIndex',
  publicTypeIndex = 'solid:publicTypeIndex',
  knows = 'foaf:knows',
}

export enum AddressShapeContext {
  countryName = 'vcard:countryName',
  locality = 'vcard:locality',
  postalCode = 'vcard:postalCode',
  region = 'vcard:region',
  streetAddress = 'vcard:streetAddress',
}

export enum EmailShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum PhoneNumberShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum TrustedAppShapeContext {
  mode = 'acl:mode',
  origin = 'acl:origin',
}

export enum RsaPublicKeyShapeContext {
  modulus = 'cert:modulus',
  exponent = 'cert:exponent',
}

export const solidProfileShex = \`
PREFIX srs: <https://shaperepo.com/schemas/solidProfile#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schem: <http://schema.org/>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX acl: <http://www.w3.org/ns/auth/acl#>
PREFIX cert:  <http://www.w3.org/ns/auth/cert#>
PREFIX ldp: <http://www.w3.org/ns/ldp#>
PREFIX sp: <http://www.w3.org/ns/pim/space#>
PREFIX solid: <http://www.w3.org/ns/solid/terms#>

srs:SolidProfileShape EXTRA a {
  a [ schem:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from Schema.org)\\" ;
  a [ foaf:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from foaf)\\" ;
  vcard:name xsd:string ?
    // rdfs:comment  \\"The formatted name of a person. Example: John Smith\\" ;
  foaf:name xsd:string ?
    // rdfs:comment  \\"An alternate way to define a person's name.\\" ;
  vcard:hasAddress @srs:AddressShape *
    // rdfs:comment  \\"The person's street address.\\" ;
  vcard:hasEmail @srs:EmailShape *
    // rdfs:comment  \\"The person's email.\\" ;
  vcard:hasPhoto IRI ?
    // rdfs:comment  \\"A link to the person's photo\\" ;
  foaf:img xsd:string ?
    // rdfs:comment  \\"Photo link but in string form\\" ;
  vcard:hasTelephone @srs:PhoneNumberShape *
    // rdfs:comment  \\"Person's telephone number\\" ;
  vcard:phone xsd:string ?
    // rdfs:comment  \\"An alternative way to define a person's telephone number using a string\\" ;
  vcard:organization-name xsd:string ?
    // rdfs:comment  \\"The name of the organization with which the person is affiliated\\" ;
  vcard:role xsd:string ?
    // rdfs:comment  \\"The name of the person's role in their organization\\" ;
  acl:trustedApp @srs:TrustedAppShape *
    // rdfs:comment  \\"A list of app origins that are trusted by this user\\" ;
  cert:key @srs:RSAPublicKeyShape *
    // rdfs:comment  \\"A list of RSA public keys that are associated with private keys the user holds.\\" ;
  ldp:inbox IRI
    // rdfs:comment  \\"The user's LDP inbox to which apps can post notifications\\" ;
  sp:preferencesFile IRI ?
    // rdfs:comment  \\"The user's preferences\\" ;
  sp:storage IRI *
    // rdfs:comment  \\"The location of a Solid storage server related to this WebId\\" ;
  solid:account IRI ?
    // rdfs:comment  \\"The user's account\\" ;
  solid:privateTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for private access only)\\" ;
  solid:publicTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for public access)\\" ;
  foaf:knows IRI *
    // rdfs:comment  \\"A list of WebIds for all the people this user knows.\\" ;
}

srs:AddressShape {
  vcard:country-name xsd:string ?
    // rdfs:comment  \\"The name of the user's country of residence\\" ;
  vcard:locality xsd:string ?
    // rdfs:comment  \\"The name of the user's locality (City, Town etc.) of residence\\" ;
  vcard:postal-code xsd:string ?
    // rdfs:comment  \\"The user's postal code\\" ;
  vcard:region xsd:string ?
    // rdfs:comment  \\"The name of the user's region (State, Province etc.) of residence\\" ;
  vcard:street-address xsd:string ?
    // rdfs:comment  \\"The user's street address\\" ;
}

srs:EmailShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"The type of email.\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of an email as a mailto link (Example <mailto:jane@example.com>)\\" ;
}

srs:PhoneNumberShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"They type of Phone Number\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of a phone number as a tel link (Example <tel:555-555-5555>)\\" ;
}

srs:TrustedAppShape {
  acl:mode [acl:Append acl:Control acl:Read acl:Write] +
    // rdfs:comment  \\"The level of access provided to this origin\\" ;
  acl:origin IRI
    // rdfs:comment \\"The app origin the user trusts\\"
}

srs:RSAPublicKeyShape {
  cert:modulus xsd:string
    // rdfs:comment  \\"RSA Modulus\\" ;
  cert:exponent xsd:integer
    // rdfs:comment  \\"RSA Exponent\\" ;
}
\`;

export const solidProfile = new Shape<
  SolidProfileShape,
  SolidProfileShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#SolidProfileShape',
  shape: solidProfileShex,
  context: SolidProfileShapeContext,
  type: SolidProfileShapeType,
  childContexts: [
    AddressShapeContext,
    EmailShapeContext,
    PhoneNumberShapeContext,
    TrustedAppShapeContext,
    RsaPublicKeyShapeContext,
  ],
});

export const address = new Shape<AddressShape, AddressShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#AddressShape',
  shape: solidProfileShex,
  context: AddressShapeContext,
});

export const email = new Shape<EmailShape, EmailShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#EmailShape',
  shape: solidProfileShex,
  context: EmailShapeContext,
  type: EmailShapeType,
});

export const phoneNumber = new Shape<
  PhoneNumberShape,
  PhoneNumberShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#PhoneNumberShape',
  shape: solidProfileShex,
  context: PhoneNumberShapeContext,
  type: PhoneNumberShapeType,
});

export const trustedApp = new Shape<TrustedAppShape, TrustedAppShapeCreateArgs>(
  {
    id: 'https://shaperepo.com/schemas/solidProfile#TrustedAppShape',
    shape: solidProfileShex,
    context: TrustedAppShapeContext,
  }
);

export const rsaPublicKey = new Shape<
  RsaPublicKeyShape,
  RsaPublicKeyShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#RSAPublicKeyShape',
  shape: solidProfileShex,
  context: RsaPublicKeyShapeContext,
});
"
`;

exports[`matches snapshots with config file 1`] = `
Array [
  "import { NamedNode, Literal } from 'rdflib';

import { Shape } from 'shex-methods';

export type Cryptocurrency = {
  id: string; // the url of a node of this shape
  p279?: {
    id: string; // the url of a node of this shape
    p279: string;
  };
  p178?: {
    id: string; // the url of a node of this shape
    p178: string;
  };
  p170?: {
    id: string; // the url of a node of this shape
    p170: string;
  };
  p2283:
    | {
        id: string; // the url of a node of this shape
        p2283: P2283Type.Q17083510 | P2283Type.Q7249984 | P2283Type.Q48834328;
      }
    | {
        id: string; // the url of a node of this shape
        p2283: P2283Type.Q17083510 | P2283Type.Q7249984 | P2283Type.Q48834328;
      }[];
  p5777?: string | string[];
  p6363?: string | string[];
} & {
  p31?:
    | {
        id: string; // the url of a node of this shape
        p31: P31Type.Q13479982;
      }
    | {
        id: string; // the url of a node of this shape
        p31: P31Type.Q13479982;
      }[];
} & ({
    id: string; // the url of a node of this shape
  } & (
    | {
        id: string; // the url of a node of this shape
        p577: {
          id: string; // the url of a node of this shape
          p577: Date;
        };
        p571?: {
          id: string; // the url of a node of this shape
          p571: Date;
        };
      }
    | {
        p571: {
          id: string; // the url of a node of this shape
          p571: Date;
        };
      }
  ));

export type CryptocurrencyCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p279?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p279: URL | NamedNode;
  };
  p178?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p178: URL | NamedNode;
  };
  p170?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p170: URL | NamedNode;
  };
  p2283:
    | {
        id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
        p2283: P2283Type.Q17083510 | P2283Type.Q7249984 | P2283Type.Q48834328;
      }
    | {
        id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
        p2283: P2283Type.Q17083510 | P2283Type.Q7249984 | P2283Type.Q48834328;
      }[];
  p5777?: string | string[];
  p6363?: string | string[];
} & {
  p31?:
    | {
        id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
        p31: P31Type.Q13479982;
      }
    | {
        id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
        p31: P31Type.Q13479982;
      }[];
} & ({
    id: string; // the url of a node of this shape
  } & (
    | {
        id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
        p577: {
          id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
          p577: Date | Literal;
        };
        p571?: {
          id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
          p571: Date | Literal;
        };
      }
    | {
        p571: {
          id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
          p571: Date | Literal;
        };
      }
  ));

export type CryptocurrencyUpdateArgs = Partial<CryptocurrencyCreateArgs>;

export enum P31Type {
  Q13479982 = 'http://www.wikidata.org/entity/Q13479982',
}

export enum P2283Type {
  Q17083510 = 'http://www.wikidata.org/entity/Q17083510',
  Q7249984 = 'http://www.wikidata.org/entity/Q7249984',
  Q48834328 = 'http://www.wikidata.org/entity/Q48834328',
}

export enum CryptocurrencyContext {
  p31 = 'p:p31',
  p279 = 'p:p279',
  p577 = 'p:p577',
  p571 = 'p:p571',
  p178 = 'p:p178',
  p170 = 'p:p170',
  p2283 = 'p:p2283',
  p5777 = 'p:p5777',
  p6363 = 'p:p6363',
}

export const cryptocurrencyShex = \`
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX crc: <https://www.wikidata.org/wiki/EntitySchema:E82#>

# QUERY MAP: SELECT ?item WHERE {?item wdt:P31 wd:Q13479982}  LIMIT 10

crc:cryptocurrency EXTRA p:P31 {
	# instance of
	p:P31 { ps:P31  [wd:Q13479982] }* ;

	# subclass of
        p:P279 { ps:P279 IRI }? ;

	# publication date or inception date 
	(  p:P577 { ps:P577 xsd:dateTime } ; p:P571 { ps:P571 xsd:dateTime } ?
	 | p:P571 { ps:P571 xsd:dateTime } ) ;

	# developer
	p:P178 { ps:P178 IRI }? ;

	# creator 
	p:P170 {ps:P170 IRI} ? ;

	# uses
	p:P2283 {ps:P2283 [wd:Q17083510 wd:Q7249984 wd:Q48834328]}+ ;

	## Identifiers

	# CoinMarketCap cryptocurrency ID 
	p:P5777  . * ;

	# WordLift ID
	wdt:P6363  . * ;
}
\`;

export const cryptocurrency = new Shape<
  Cryptocurrency,
  CryptocurrencyCreateArgs
>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E82#cryptocurrency',
  shape: cryptocurrencyShex,
  context: CryptocurrencyContext,
});

export type BasicContainerShape = {
  id: string; // the url of a node of this shape
  contains?: ResourceShape | ResourceShape[]; // Contains these Resources
  size: number; // Size of Container
  mtime: number; // Time of Container creation created
  modified: Date; // Time the Container was modified
} & {
  type:
    | BasicContainerShapeType.BasicContainer
    | BasicContainerShapeType.Container; // Defines the node as a Container
};

export type BasicContainerShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  contains?:
    | URL
    | NamedNode
    | ResourceShapeCreateArgs
    | (URL | NamedNode | ResourceShapeCreateArgs)[]; // Contains these Resources
  size: number | Literal; // Size of Container
  mtime: number | Literal; // Time of Container creation created
  modified: Date | Literal; // Time the Container was modified
} & {
  type:
    | BasicContainerShapeType.BasicContainer
    | BasicContainerShapeType.Container; // Defines the node as a Container
};

export type BasicContainerShapeUpdateArgs = Partial<BasicContainerShapeCreateArgs>;

export type ResourceShape = {
  id: string; // the url of a node of this shape
  size: number; // Size of Container
  mtime: number; // Time of Container creation created
  modified: Date; // Time the Container was modified
} & {
  type: ResourceShapeType.Resource; // Defines the node as a Resource
};

export type ResourceShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  size: number | Literal; // Size of Container
  mtime: number | Literal; // Time of Container creation created
  modified: Date | Literal; // Time the Container was modified
} & {
  type: ResourceShapeType.Resource; // Defines the node as a Resource
};

export type ResourceShapeUpdateArgs = Partial<ResourceShapeCreateArgs>;

export enum BasicContainerShapeType {
  BasicContainer = 'http://www.w3.org/ns/ldp#BasicContainer',
  Container = 'http://www.w3.org/ns/ldp#Container',
}

export enum ResourceShapeType {
  Resource = 'http://www.w3.org/ns/ldp#Resource',
}

export enum BasicContainerShapeContext {
  type = 'rdf:type',
  contains = 'ldp:contains',
  size = 'st:size',
  mtime = 'st:mtime',
  modified = 'terms:modified',
}

export enum ResourceShapeContext {
  type = 'rdf:type',
  size = 'st:size',
  mtime = 'st:mtime',
  modified = 'terms:modified',
}

export const ldpShapesShex = \`
PREFIX ldp: <http://www.w3.org/ns/ldp#>
PREFIX st: <http://www.w3.org/ns/posix/stat#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX terms: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX tur: <http://www.w3.org/ns/iana/media-types/text/turtle#>

ldp:BasicContainerShape EXTRA a {
  a [ ldp:BasicContainer ]
    // rdfs:comment  \\"Defines the node as a Container\\" ;
  a [ ldp:Container ]
    // rdfs:comment  \\"Defines the node as a Container\\" ;
  ldp:contains @ldp:ResourceShape *
    // rdfs:comment  \\"Contains these Resources\\" ;
  st:size xsd:integer
    // rdfs:comment  \\"Size of Container\\" ;
  st:mtime xsd:decimal 
    // rdfs:comment  \\"Time of Container creation created\\" ;
  terms:modified xsd:dateTime 
    // rdfs:comment  \\"Time the Container was modified\\" ;
}

ldp:ResourceShape EXTRA a {
  a [ ldp:Resource ]
    // rdfs:comment  \\"Defines the node as a Resource\\" ;
  st:size xsd:integer
    // rdfs:comment  \\"Size of Container\\" ;
  st:mtime xsd:decimal
    // rdfs:comment  \\"Time of Container creation created\\" ;
  terms:modified xsd:dateTime
    // rdfs:comment  \\"Time the Container was modified\\" ;
}
\`;

export const basicContainer = new Shape<
  BasicContainerShape,
  BasicContainerShapeCreateArgs
>({
  id: 'http://www.w3.org/ns/ldp#BasicContainerShape',
  shape: ldpShapesShex,
  context: BasicContainerShapeContext,
  type: BasicContainerShapeType,
  childContexts: [ResourceShapeContext],
});

export const resource = new Shape<ResourceShape, ResourceShapeCreateArgs>({
  id: 'http://www.w3.org/ns/ldp#ResourceShape',
  shape: ldpShapesShex,
  context: ResourceShapeContext,
  type: ResourceShapeType,
});

export type ChatShape = {
  id: string; // the url of a node of this shape
  type: ChatShapeType.LongChat; // Defines the type of the chat as a LongChat
  author: string; // The WebId of the entity that created this chat
  created: Date; // The date and time the chat was created
  title: string; // The title of the chat
  participation?: ChatParticipationShape | ChatParticipationShape[]; // A list of people participating in this chat
  sharedPreferences?: string; // Chat preferences
};

export type ChatShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  type: ChatShapeType.LongChat; // Defines the type of the chat as a LongChat
  author: URL | NamedNode; // The WebId of the entity that created this chat
  created: Date | Literal; // The date and time the chat was created
  title: string | Literal; // The title of the chat
  participation?:
    | URL
    | NamedNode
    | ChatParticipationShapeCreateArgs
    | (URL | NamedNode | ChatParticipationShapeCreateArgs)[]; // A list of people participating in this chat
  sharedPreferences?: URL | NamedNode; // Chat preferences
};

export type ChatShapeUpdateArgs = Partial<ChatShapeCreateArgs>;

export type ChatParticipationShape = {
  id: string; // the url of a node of this shape
  dtstart: Date; // The date and time this individual began participating in the chat.
  participant: string; // The WebId of the participant
  backgroundColor?: string; // The background color of the participant's chat bubbles
};

export type ChatParticipationShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  dtstart: Date | Literal; // The date and time this individual began participating in the chat.
  participant: URL | NamedNode; // The WebId of the participant
  backgroundColor?: string | Literal; // The background color of the participant's chat bubbles
};

export type ChatParticipationShapeUpdateArgs = Partial<ChatParticipationShapeCreateArgs>;

export type ChatMessageListShape = {
  id: string; // the url of a node of this shape
  message?: ChatMessageShape | ChatMessageShape[]; // A list of messages in the chat
};

export type ChatMessageListShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  message?:
    | URL
    | NamedNode
    | ChatMessageShapeCreateArgs
    | (URL | NamedNode | ChatMessageShapeCreateArgs)[]; // A list of messages in the chat
};

export type ChatMessageListShapeUpdateArgs = Partial<ChatMessageListShapeCreateArgs>;

export type ChatMessageShape = {
  id: string; // the url of a node of this shape
  created: Date; // The date and time this message was posted.
  content: string; // The text content of the message
  maker: string; // The WebId of the person who sent the message.
};

export type ChatMessageShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  created: Date | Literal; // The date and time this message was posted.
  content: string | Literal; // The text content of the message
  maker: URL | NamedNode; // The WebId of the person who sent the message.
};

export type ChatMessageShapeUpdateArgs = Partial<ChatMessageShapeCreateArgs>;

export enum ChatShapeType {
  LongChat = 'http://www.w3.org/ns/pim/meeting#LongChat',
}

export enum ChatShapeContext {
  type = 'rdf:type',
  author = 'purl:author',
  created = 'purl:created',
  title = 'purl:title',
  participation = 'flow:participation',
  sharedPreferences = 'ui:sharedPreferences',
}

export enum ChatParticipationShapeContext {
  dtstart = 'ic:dtstart',
  participant = 'flow:participant',
  backgroundColor = 'ui:backgroundColor',
}

export enum ChatMessageListShapeContext {
  name = 'message',
  value = 'flow:message',
}

export enum ChatMessageShapeContext {
  created = 'terms:created',
  content = 'ns:content',
  maker = 'foaf:maker',
}

export const longChatShex = \`
PREFIX srs: <https://shaperepo.com/schemas/longChat#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX mee: <http://www.w3.org/ns/pim/meeting#>
PREFIX purl: <http://purl.org/dc/elements/1.1/>
PREFIX flow: <http://www.w3.org/2005/01/wf/flow#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://rdfs.org/sioc/ns#>
PREFIX terms: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ic: <http://www.w3.org/2002/12/cal/ical#>
PREFIX ui: <http://www.w3.org/ns/ui#>

srs:ChatShape {
  a [ mee:LongChat ]
    // rdfs:comment  \\"Defines the type of the chat as a LongChat\\" ;
  purl:author IRI
    // rdfs:comment  \\"The WebId of the entity that created this chat\\" ;
  purl:created xsd:dateTime
    // rdfs:comment  \\"The date and time the chat was created\\" ;
  purl:title xsd:string
    // rdfs:comment  \\"The title of the chat\\" ;
  flow:participation @srs:ChatParticipationShape *
    // rdfs:comment  \\"A list of people participating in this chat\\" ;
  ui:sharedPreferences IRI ? 
    // rdfs:comment  \\"Chat preferences\\" ;
  & srs:ChatMessageListShape
}
 
srs:ChatParticipationShape {
  ic:dtstart xsd:dateTime
    // rdfs:comment  \\"The date and time this individual began participating in the chat.\\" ;
  flow:participant IRI
    // rdfs:comment  \\"The WebId of the participant\\" ;
  ui:backgroundColor xsd:string ?
    // rdfs:comment  \\"The background color of the participant's chat bubbles\\"
}

srs:ChatMessageListShape {
  flow:message @srs:ChatMessageShape *
    // rdfs:comment  \\"A list of messages in the chat\\" ;
}

srs:ChatMessageShape {
  terms:created xsd:dateTime
    // rdfs:comment  \\"The date and time this message was posted.\\" ;
  ns:content xsd:string
    // rdfs:comment  \\"The text content of the message\\" ;
  foaf:maker IRI
    // rdfs:comment  \\"The WebId of the person who sent the message.\\"
}
\`;

export const chat = new Shape<ChatShape, ChatShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/longChat#ChatShape',
  shape: longChatShex,
  context: ChatShapeContext,
  type: ChatShapeType,
  childContexts: [ChatParticipationShapeContext],
});

export const chatParticipation = new Shape<
  ChatParticipationShape,
  ChatParticipationShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/longChat#ChatParticipationShape',
  shape: longChatShex,
  context: ChatParticipationShapeContext,
});

export const chatMessageList = new Shape<
  ChatMessageListShape,
  ChatMessageListShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/longChat#ChatMessageListShape',
  shape: longChatShex,
  context: ChatMessageListShapeContext,
  childContexts: [ChatMessageShapeContext],
});

export const chatMessage = new Shape<
  ChatMessageShape,
  ChatMessageShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/longChat#ChatMessageShape',
  shape: longChatShex,
  context: ChatMessageShapeContext,
});

export type OperatingSystem = {
  id: string; // the url of a node of this shape
  p31: {
    id: string; // the url of a node of this shape
    p31: {
      id: string; // the url of a node of this shape
      p279:
        | {
            id: string; // the url of a node of this shape
            p279: P279Type.Q9135;
          }
        | {
            id: string; // the url of a node of this shape
            p279: P279Type.Q9135;
          }[];
    };
  };
  p275: {
    id: string; // the url of a node of this shape
    p275: string | string[];
  };
  p178?: {
    id: string; // the url of a node of this shape
    p178: string;
  };
  p176?: {
    id: string; // the url of a node of this shape
    p176: string;
  };
  p910?: {
    id: string; // the url of a node of this shape
    p910: string;
  };
  p373?: {
    id: string; // the url of a node of this shape
    p373?: string | string[];
  };
  p5795?: {
    id: string; // the url of a node of this shape
    p5795?: string | string[];
  };
  p5868?: {
    id: string; // the url of a node of this shape
    p5868?: string | string[];
  };
  p268?: {
    id: string; // the url of a node of this shape
    p268?: string | string[];
  };
};

export type OperatingSystemCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p31: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p31: {
      id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
      p279:
        | {
            id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
            p279: P279Type.Q9135;
          }
        | {
            id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
            p279: P279Type.Q9135;
          }[];
    };
  };
  p275: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p275: URL | NamedNode | (URL | NamedNode)[];
  };
  p178?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p178: URL | NamedNode;
  };
  p176?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p176: URL | NamedNode;
  };
  p910?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p910: URL | NamedNode;
  };
  p373?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p373?: string | Literal | (string | Literal)[];
  };
  p5795?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p5795?: string | Literal | (string | Literal)[];
  };
  p5868?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p5868?: string | Literal | (string | Literal)[];
  };
  p268?: {
    id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
    p268?: string | Literal | (string | Literal)[];
  };
};

export type OperatingSystemUpdateArgs = Partial<OperatingSystemCreateArgs>;

export enum P279Type {
  Q9135 = 'http://www.wikidata.org/entity/Q9135',
}

export enum OperatingSystemContext {
  p31 = 'p:p31',
  p275 = 'p:p275',
  p178 = 'p:p178',
  p176 = 'p:p176',
  p910 = 'p:p910',
  p373 = 'p:p373',
  p5795 = 'p:p5795',
  p5868 = 'p:p5868',
  p268 = 'p:p268',
}

export const operatingSystemShex = \`
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX ops: <https://www.wikidata.org/wiki/EntitySchema:E102#>

ops:operating_system {
# instance of; 
    p:P31 { ps:P31 { p:P279 {ps:P279 [wd:Q9135]}+} } ;
# license; 
    p:P275 { ps:P275 IRI + } ;
# developer; 
    p:P178 { ps:P178 IRI } ? ;
# manufacturer; 
    p:P176 { ps:P176 IRI } ? ;
# topic's main category; 
    p:P910 { ps:P910 IRI } ? ;
# Commons category;
    p:P373 { ps:P373 xsd:string * } ? ;
# IGDB platform ID; 
    p:P5795 { ps:P5795 xsd:string * } ? ;
# MobyGames platform ID; 
    p:P5868 { ps:P5868 xsd:string * } ? ;
# BnF ID; 
    p:P268 {ps:P268 xsd:string * } ? ;
}
\`;

export const operatingSystem = new Shape<
  OperatingSystem,
  OperatingSystemCreateArgs
>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E102#operating_system',
  shape: operatingSystemShex,
  context: OperatingSystemContext,
});

export type Programminglanguage = {
  id: string; // the url of a node of this shape
  p178?: P178Developer | P178Developer[];
  p3966?: P3966Paradigm | P3966Paradigm[];
  p577?: P577PublicationDate | P577PublicationDate[];
  p856?: P856Website | P856Website[];
};

export type ProgramminglanguageCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p178?:
    | URL
    | NamedNode
    | P178DeveloperCreateArgs
    | (URL | NamedNode | P178DeveloperCreateArgs)[];
  p3966?:
    | URL
    | NamedNode
    | P3966ParadigmCreateArgs
    | (URL | NamedNode | P3966ParadigmCreateArgs)[];
  p577?:
    | URL
    | NamedNode
    | P577PublicationDateCreateArgs
    | (URL | NamedNode | P577PublicationDateCreateArgs)[];
  p856?:
    | URL
    | NamedNode
    | P856WebsiteCreateArgs
    | (URL | NamedNode | P856WebsiteCreateArgs)[];
};

export type ProgramminglanguageUpdateArgs = Partial<ProgramminglanguageCreateArgs>;

export type P31InstanceOfProgramminglanguage = {
  id: string; // the url of a node of this shape
  p31: P31Type.Q9143;
};

export type P31InstanceOfProgramminglanguageCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p31: P31Type.Q9143;
};

export type P31InstanceOfProgramminglanguageUpdateArgs = Partial<P31InstanceOfProgramminglanguageCreateArgs>;

export type P279SubclassOfProgramminglanguage = {
  id: string; // the url of a node of this shape
} & {
  p279: P279SubclassOfProgramminglanguage;
};

export type P279SubclassOfProgramminglanguageCreateArgs = {
  id: string; // the url of a node of this shape
} & {
  p279: URL | NamedNode | P279SubclassOfProgramminglanguageCreateArgs;
};

export type P279SubclassOfProgramminglanguageUpdateArgs = Partial<P279SubclassOfProgramminglanguageCreateArgs>;

export type P178Developer = {
  id: string; // the url of a node of this shape
  p178: string;
  p580?: Date;
  p582?: Date;
};

export type P178DeveloperCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p178: URL | NamedNode;
  p580?: Date | Literal;
  p582?: Date | Literal;
};

export type P178DeveloperUpdateArgs = Partial<P178DeveloperCreateArgs>;

export type P3966Paradigm = {
  id: string; // the url of a node of this shape
  p3966: {
    id: string; // the url of a node of this shape
  } & (
    | {
        p31: ProgrammingParadigm;
      }
    | {
        p279: ProgrammingParadigm;
      }
  );
};

export type P3966ParadigmCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p3966: {
    id: string; // the url of a node of this shape
  } & (
    | {
        p31: URL | NamedNode | ProgrammingParadigmCreateArgs;
      }
    | {
        p279: URL | NamedNode | ProgrammingParadigmCreateArgs;
      }
  );
};

export type P3966ParadigmUpdateArgs = Partial<P3966ParadigmCreateArgs>;

export type ProgrammingParadigm = {
  id: string; // the url of a node of this shape
  p31: P31Type.Q188267;
};

export type ProgrammingParadigmCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p31: P31Type.Q188267;
};

export type ProgrammingParadigmUpdateArgs = Partial<ProgrammingParadigmCreateArgs>;

export type P577PublicationDate = {
  id: string; // the url of a node of this shape
  p577: string;
};

export type P577PublicationDateCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p577: string;
};

export type P577PublicationDateUpdateArgs = Partial<P577PublicationDateCreateArgs>;

export type P856Website = {
  id: string; // the url of a node of this shape
  p856: string;
};

export type P856WebsiteCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p856: URL | NamedNode;
};

export type P856WebsiteUpdateArgs = Partial<P856WebsiteCreateArgs>;

export enum P31Type {
  Q188267 = 'http://www.wikidata.org/entity/Q188267',
  Q9143 = 'http://www.wikidata.org/entity/Q9143',
}

export enum ProgramminglanguageContext {
  p31 = 'p:p31',
  p178 = 'p:p178',
  p3966 = 'p:p3966',
  p577 = 'p:p577',
  p856 = 'p:p856',
}

export enum P31InstanceOfProgramminglanguageContext {
  name = 'p31',
  value = 'p:p31',
}

export enum P279SubclassOfProgramminglanguageContext {
  p279 = 'p:p279',
}

export enum P178DeveloperContext {
  p178 = 'p:p178',
  p580 = 'p:p580',
  p582 = 'p:p582',
}

export enum P3966ParadigmContext {
  p31 = 'p:p31',
  p279 = 'p:p279',
  name = 'p3966',
  value = 'p:p3966',
}

export enum ProgrammingParadigmContext {
  name = 'p31',
  value = 'p:p31',
}

export enum P577PublicationDateContext {
  name = 'p577',
  value = 'p:p577',
}

export enum P856WebsiteContext {
  name = 'p856',
  value = 'p:p856',
}

export const programmingLanguageShex = \`
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX pr: <http://www.wikidata.org/prop/reference/>
PREFIX ps: <http://www.wikidata.org/prop/statement/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX pq: <http://www.wikidata.org/prop/qualifier/>
PREFIX pgl: <https://www.wikidata.org/wiki/EntitySchema:E55#>

#test data:  SELECT * WHERE { ?item wdt:P31 wd:Q9143 . } LIMIT 10

pgl:programminglanguage EXTRA p:P31 {
  (p:P31 @pgl:P31_instance_of_programminglanguage|p:P31 @pgl:P279_subclass_of_programminglanguage)+;
  p:P178 @pgl:P178_developer*;
  p:P3966 @pgl:P3966_paradigm*;
  p:P577 @pgl:P577_publication_date*;
  p:P856 @pgl:P856_website*;
}

pgl:P31_instance_of_programminglanguage {
    ps:P31 [ wd:Q9143 ] ;
}

pgl:P279_subclass_of_programminglanguage {
    ps:P279 [ wd:Q9143 ] |
      ps:P279 @pgl:P279_subclass_of_programminglanguage;
}

pgl:P178_developer {
  ps:P178 IRI;
  pq:P580 xsd:dateTime? ;
  pq:P582 xsd:dateTime? ;
}

pgl:P3966_paradigm {
    ps:P3966 EXTRA p:P31 EXTRA p:P279  {
              (p:P31 @pgl:Programming_paradigm | p:P279 @pgl:Programming_paradigm );

           } ;
}

pgl:Programming_paradigm {
    ps:P31 [wd:Q188267] # programming paradigm ;
}
  

pgl:P577_publication_date {
  ps:P577 LITERAL;
}

pgl:P856_website {
  ps:P856 IRI;
}
\`;

export const programminglanguage = new Shape<
  Programminglanguage,
  ProgramminglanguageCreateArgs
>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E55#programminglanguage',
  shape: programmingLanguageShex,
  context: ProgramminglanguageContext,
  childContexts: [
    P31InstanceOfProgramminglanguageContext,
    P279SubclassOfProgramminglanguageContext,
    P178DeveloperContext,
    P3966ParadigmContext,
    P577PublicationDateContext,
    P856WebsiteContext,
  ],
});

export const p31InstanceOfProgramminglanguage = new Shape<
  P31InstanceOfProgramminglanguage,
  P31InstanceOfProgramminglanguageCreateArgs
>({
  id:
    'https://www.wikidata.org/wiki/EntitySchema:E55#P31_instance_of_programminglanguage',
  shape: programmingLanguageShex,
  context: P31InstanceOfProgramminglanguageContext,
});

export const p279SubclassOfProgramminglanguage = new Shape<
  P279SubclassOfProgramminglanguage,
  P279SubclassOfProgramminglanguageCreateArgs
>({
  id:
    'https://www.wikidata.org/wiki/EntitySchema:E55#P279_subclass_of_programminglanguage',
  shape: programmingLanguageShex,
  context: P279SubclassOfProgramminglanguageContext,
  childContexts: [P279SubclassOfProgramminglanguageContext],
});

export const p178Developer = new Shape<P178Developer, P178DeveloperCreateArgs>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E55#P178_developer',
  shape: programmingLanguageShex,
  context: P178DeveloperContext,
});

export const p3966Paradigm = new Shape<P3966Paradigm, P3966ParadigmCreateArgs>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E55#P3966_paradigm',
  shape: programmingLanguageShex,
  context: P3966ParadigmContext,
});

export const programmingParadigm = new Shape<
  ProgrammingParadigm,
  ProgrammingParadigmCreateArgs
>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E55#Programming_paradigm',
  shape: programmingLanguageShex,
  context: ProgrammingParadigmContext,
});

export const p577PublicationDate = new Shape<
  P577PublicationDate,
  P577PublicationDateCreateArgs
>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E55#P577_publication_date',
  shape: programmingLanguageShex,
  context: P577PublicationDateContext,
});

export const p856Website = new Shape<P856Website, P856WebsiteCreateArgs>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E55#P856_website',
  shape: programmingLanguageShex,
  context: P856WebsiteContext,
});

export type SolidProfileShape = {
  id: string; // the url of a node of this shape
  vcardName?: string; // The formatted name of a person. Example: John Smith
  foafName?: string; // An alternate way to define a person's name.
  hasAddress?: AddressShape | AddressShape[]; // The person's street address.
  hasEmail?: EmailShape | EmailShape[]; // The person's email.
  hasPhoto?: string; // A link to the person's photo
  img?: string; // Photo link but in string form
  hasTelephone?: PhoneNumberShape | PhoneNumberShape[]; // Person's telephone number
  phone?: string; // An alternative way to define a person's telephone number using a string
  organizationName?: string; // The name of the organization with which the person is affiliated
  role?: string; // The name of the person's role in their organization
  trustedApp?: TrustedAppShape | TrustedAppShape[]; // A list of app origins that are trusted by this user
  key?: RsaPublicKeyShape | RsaPublicKeyShape[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: string; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: string; // The user's preferences
  storage?: string | string[]; // The location of a Solid storage server related to this WebId
  account?: string; // The user's account
  privateTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for public access)
  knows?: string | string[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  vcardName?: string | Literal; // The formatted name of a person. Example: John Smith
  foafName?: string | Literal; // An alternate way to define a person's name.
  hasAddress?:
    | URL
    | NamedNode
    | AddressShapeCreateArgs
    | (URL | NamedNode | AddressShapeCreateArgs)[]; // The person's street address.
  hasEmail?:
    | URL
    | NamedNode
    | EmailShapeCreateArgs
    | (URL | NamedNode | EmailShapeCreateArgs)[]; // The person's email.
  hasPhoto?: URL | NamedNode; // A link to the person's photo
  img?: string | Literal; // Photo link but in string form
  hasTelephone?:
    | URL
    | NamedNode
    | PhoneNumberShapeCreateArgs
    | (URL | NamedNode | PhoneNumberShapeCreateArgs)[]; // Person's telephone number
  phone?: string | Literal; // An alternative way to define a person's telephone number using a string
  organizationName?: string | Literal; // The name of the organization with which the person is affiliated
  role?: string | Literal; // The name of the person's role in their organization
  trustedApp?:
    | URL
    | NamedNode
    | TrustedAppShapeCreateArgs
    | (URL | NamedNode | TrustedAppShapeCreateArgs)[]; // A list of app origins that are trusted by this user
  key?:
    | URL
    | NamedNode
    | RsaPublicKeyShapeCreateArgs
    | (URL | NamedNode | RsaPublicKeyShapeCreateArgs)[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: URL | NamedNode; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: URL | NamedNode; // The user's preferences
  storage?: URL | NamedNode | (URL | NamedNode)[]; // The location of a Solid storage server related to this WebId
  account?: URL | NamedNode; // The user's account
  privateTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for public access)
  knows?: URL | NamedNode | (URL | NamedNode)[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeUpdateArgs = Partial<SolidProfileShapeCreateArgs>;

export type AddressShape = {
  id: string; // the url of a node of this shape
  countryName?: string; // The name of the user's country of residence
  locality?: string; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string; // The user's postal code
  region?: string; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string; // The user's street address
};

export type AddressShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  countryName?: string | Literal; // The name of the user's country of residence
  locality?: string | Literal; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string | Literal; // The user's postal code
  region?: string | Literal; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string | Literal; // The user's street address
};

export type AddressShapeUpdateArgs = Partial<AddressShapeCreateArgs>;

export type EmailShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeUpdateArgs = Partial<EmailShapeCreateArgs>;

export type PhoneNumberShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeUpdateArgs = Partial<PhoneNumberShapeCreateArgs>;

export type TrustedAppShape = {
  id: string; // the url of a node of this shape
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: string; // The app origin the user trusts
};

export type TrustedAppShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: URL | NamedNode; // The app origin the user trusts
};

export type TrustedAppShapeUpdateArgs = Partial<TrustedAppShapeCreateArgs>;

export type RsaPublicKeyShape = {
  id: string; // the url of a node of this shape
  modulus: string; // RSA Modulus
  exponent: number; // RSA Exponent
};

export type RsaPublicKeyShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  modulus: string | Literal; // RSA Modulus
  exponent: number | Literal; // RSA Exponent
};

export type RsaPublicKeyShapeUpdateArgs = Partial<RsaPublicKeyShapeCreateArgs>;

export enum SolidProfileShapeType {
  SchemPerson = 'http://schema.org/Person',
  FoafPerson = 'http://xmlns.com/foaf/0.1/Person',
}

export enum EmailShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum PhoneNumberShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum ModeType {
  Append = 'http://www.w3.org/ns/auth/acl#Append',
  Control = 'http://www.w3.org/ns/auth/acl#Control',
  Read = 'http://www.w3.org/ns/auth/acl#Read',
  Write = 'http://www.w3.org/ns/auth/acl#Write',
}

export enum SolidProfileShapeContext {
  type = 'rdf:type',
  vcardName = 'vcard:name',
  foafName = 'foaf:name',
  hasAddress = 'vcard:hasAddress',
  hasEmail = 'vcard:hasEmail',
  hasPhoto = 'vcard:hasPhoto',
  img = 'foaf:img',
  hasTelephone = 'vcard:hasTelephone',
  phone = 'vcard:phone',
  organizationName = 'vcard:organizationName',
  role = 'vcard:role',
  trustedApp = 'acl:trustedApp',
  key = 'cert:key',
  inbox = 'ldp:inbox',
  preferencesFile = 'sp:preferencesFile',
  storage = 'sp:storage',
  account = 'solid:account',
  privateTypeIndex = 'solid:privateTypeIndex',
  publicTypeIndex = 'solid:publicTypeIndex',
  knows = 'foaf:knows',
}

export enum AddressShapeContext {
  countryName = 'vcard:countryName',
  locality = 'vcard:locality',
  postalCode = 'vcard:postalCode',
  region = 'vcard:region',
  streetAddress = 'vcard:streetAddress',
}

export enum EmailShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum PhoneNumberShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum TrustedAppShapeContext {
  mode = 'acl:mode',
  origin = 'acl:origin',
}

export enum RsaPublicKeyShapeContext {
  modulus = 'cert:modulus',
  exponent = 'cert:exponent',
}

export const solidProfileShex = \`
PREFIX srs: <https://shaperepo.com/schemas/solidProfile#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schem: <http://schema.org/>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX acl: <http://www.w3.org/ns/auth/acl#>
PREFIX cert:  <http://www.w3.org/ns/auth/cert#>
PREFIX ldp: <http://www.w3.org/ns/ldp#>
PREFIX sp: <http://www.w3.org/ns/pim/space#>
PREFIX solid: <http://www.w3.org/ns/solid/terms#>

srs:SolidProfileShape EXTRA a {
  a [ schem:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from Schema.org)\\" ;
  a [ foaf:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from foaf)\\" ;
  vcard:name xsd:string ?
    // rdfs:comment  \\"The formatted name of a person. Example: John Smith\\" ;
  foaf:name xsd:string ?
    // rdfs:comment  \\"An alternate way to define a person's name.\\" ;
  vcard:hasAddress @srs:AddressShape *
    // rdfs:comment  \\"The person's street address.\\" ;
  vcard:hasEmail @srs:EmailShape *
    // rdfs:comment  \\"The person's email.\\" ;
  vcard:hasPhoto IRI ?
    // rdfs:comment  \\"A link to the person's photo\\" ;
  foaf:img xsd:string ?
    // rdfs:comment  \\"Photo link but in string form\\" ;
  vcard:hasTelephone @srs:PhoneNumberShape *
    // rdfs:comment  \\"Person's telephone number\\" ;
  vcard:phone xsd:string ?
    // rdfs:comment  \\"An alternative way to define a person's telephone number using a string\\" ;
  vcard:organization-name xsd:string ?
    // rdfs:comment  \\"The name of the organization with which the person is affiliated\\" ;
  vcard:role xsd:string ?
    // rdfs:comment  \\"The name of the person's role in their organization\\" ;
  acl:trustedApp @srs:TrustedAppShape *
    // rdfs:comment  \\"A list of app origins that are trusted by this user\\" ;
  cert:key @srs:RSAPublicKeyShape *
    // rdfs:comment  \\"A list of RSA public keys that are associated with private keys the user holds.\\" ;
  ldp:inbox IRI
    // rdfs:comment  \\"The user's LDP inbox to which apps can post notifications\\" ;
  sp:preferencesFile IRI ?
    // rdfs:comment  \\"The user's preferences\\" ;
  sp:storage IRI *
    // rdfs:comment  \\"The location of a Solid storage server related to this WebId\\" ;
  solid:account IRI ?
    // rdfs:comment  \\"The user's account\\" ;
  solid:privateTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for private access only)\\" ;
  solid:publicTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for public access)\\" ;
  foaf:knows IRI *
    // rdfs:comment  \\"A list of WebIds for all the people this user knows.\\" ;
}

srs:AddressShape {
  vcard:country-name xsd:string ?
    // rdfs:comment  \\"The name of the user's country of residence\\" ;
  vcard:locality xsd:string ?
    // rdfs:comment  \\"The name of the user's locality (City, Town etc.) of residence\\" ;
  vcard:postal-code xsd:string ?
    // rdfs:comment  \\"The user's postal code\\" ;
  vcard:region xsd:string ?
    // rdfs:comment  \\"The name of the user's region (State, Province etc.) of residence\\" ;
  vcard:street-address xsd:string ?
    // rdfs:comment  \\"The user's street address\\" ;
}

srs:EmailShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"The type of email.\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of an email as a mailto link (Example <mailto:jane@example.com>)\\" ;
}

srs:PhoneNumberShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"They type of Phone Number\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of a phone number as a tel link (Example <tel:555-555-5555>)\\" ;
}

srs:TrustedAppShape {
  acl:mode [acl:Append acl:Control acl:Read acl:Write] +
    // rdfs:comment  \\"The level of access provided to this origin\\" ;
  acl:origin IRI
    // rdfs:comment \\"The app origin the user trusts\\"
}

srs:RSAPublicKeyShape {
  cert:modulus xsd:string
    // rdfs:comment  \\"RSA Modulus\\" ;
  cert:exponent xsd:integer
    // rdfs:comment  \\"RSA Exponent\\" ;
}
\`;

export const solidProfile = new Shape<
  SolidProfileShape,
  SolidProfileShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#SolidProfileShape',
  shape: solidProfileShex,
  context: SolidProfileShapeContext,
  type: SolidProfileShapeType,
  childContexts: [
    AddressShapeContext,
    EmailShapeContext,
    PhoneNumberShapeContext,
    TrustedAppShapeContext,
    RsaPublicKeyShapeContext,
  ],
});

export const address = new Shape<AddressShape, AddressShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#AddressShape',
  shape: solidProfileShex,
  context: AddressShapeContext,
});

export const email = new Shape<EmailShape, EmailShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#EmailShape',
  shape: solidProfileShex,
  context: EmailShapeContext,
  type: EmailShapeType,
});

export const phoneNumber = new Shape<
  PhoneNumberShape,
  PhoneNumberShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#PhoneNumberShape',
  shape: solidProfileShex,
  context: PhoneNumberShapeContext,
  type: PhoneNumberShapeType,
});

export const trustedApp = new Shape<TrustedAppShape, TrustedAppShapeCreateArgs>(
  {
    id: 'https://shaperepo.com/schemas/solidProfile#TrustedAppShape',
    shape: solidProfileShex,
    context: TrustedAppShapeContext,
  },
);

export const rsaPublicKey = new Shape<
  RsaPublicKeyShape,
  RsaPublicKeyShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#RSAPublicKeyShape',
  shape: solidProfileShex,
  context: RsaPublicKeyShapeContext,
});

export type State = {
  id: string; // the url of a node of this shape
  p1448: string | string[];
  p1705: string | string[];
  p487: string;
  p30: {
    p31: P31Type.Q5107;
  };
  p3896: string;
  p935: string;
  p373: string;
  p3722: string;
  p910: {
    p31: P31Type.Q4167836;
  };
  p5125: {
    p31: P31Type.Q26884324;
  };
  p1151: {
    p31: P31Type.Q4663903;
  };
  p1792: {
    p31: P31Type.Q4167836;
  };
  p1464: {
    p31: P31Type.Q4167836;
  };
  p1465: {
    p31: P31Type.Q4167836;
  };
  p1791: {
    p31: P31Type.Q4167836;
  };
  p1740: {
    p31: P31Type.Q4167836;
  };
  p2633: {
    p31: P31Type.Q46865913;
  };
  p2184: {
    p31: P31Type.Q17544377;
  };
  p948: string;
  p85: {
    p31: P31Type.Q23691;
  };
  p163: {
    p31: P31Type.Q186516;
  };
  p237: {
    p31: P31Type.Q645466;
  };
  p36: {
    p31: P31Type.Q5119;
  };
  p122: {
    p31: P31Type.Q1307214;
  };
} & {
  p31: P31Type.Q3624078;
};

export type StateCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p1448: string | string[];
  p1705: string | string[];
  p487: string;
  p30: {
    p31: P31Type.Q5107;
  };
  p3896: URL | NamedNode;
  p935: string;
  p373: string;
  p3722: string;
  p910: {
    p31: P31Type.Q4167836;
  };
  p5125: {
    p31: P31Type.Q26884324;
  };
  p1151: {
    p31: P31Type.Q4663903;
  };
  p1792: {
    p31: P31Type.Q4167836;
  };
  p1464: {
    p31: P31Type.Q4167836;
  };
  p1465: {
    p31: P31Type.Q4167836;
  };
  p1791: {
    p31: P31Type.Q4167836;
  };
  p1740: {
    p31: P31Type.Q4167836;
  };
  p2633: {
    p31: P31Type.Q46865913;
  };
  p2184: {
    p31: P31Type.Q17544377;
  };
  p948: URL | NamedNode;
  p85: {
    p31: P31Type.Q23691;
  };
  p163: {
    p31: P31Type.Q186516;
  };
  p237: {
    p31: P31Type.Q645466;
  };
  p36: {
    p31: P31Type.Q5119;
  };
  p122: {
    p31: P31Type.Q1307214;
  };
} & {
  p31: P31Type.Q3624078;
};

export type StateUpdateArgs = Partial<StateCreateArgs>;

export enum P31Type {
  Q1307214 = 'http://www.wikidata.org/entity/Q1307214',
  Q5119 = 'http://www.wikidata.org/entity/Q5119',
  Q645466 = 'http://www.wikidata.org/entity/Q645466',
  Q186516 = 'http://www.wikidata.org/entity/Q186516',
  Q23691 = 'http://www.wikidata.org/entity/Q23691',
  Q17544377 = 'http://www.wikidata.org/entity/Q17544377',
  Q46865913 = 'http://www.wikidata.org/entity/Q46865913',
  Q4167836 = 'http://www.wikidata.org/entity/Q4167836',
  Q4663903 = 'http://www.wikidata.org/entity/Q4663903',
  Q26884324 = 'http://www.wikidata.org/entity/Q26884324',
  Q5107 = 'http://www.wikidata.org/entity/Q5107',
  Q3624078 = 'http://www.wikidata.org/entity/Q3624078',
}

export enum StateContext {
  p31 = 'wdt:p31',
  p1448 = 'wdt:p1448',
  p1705 = 'wdt:p1705',
  p487 = 'wdt:p487',
  p30 = 'wdt:p30',
  p3896 = 'wdt:p3896',
  p935 = 'wdt:p935',
  p373 = 'wdt:p373',
  p3722 = 'wdt:p3722',
  p910 = 'wdt:p910',
  p5125 = 'wdt:p5125',
  p1151 = 'wdt:p1151',
  p1792 = 'wdt:p1792',
  p1464 = 'wdt:p1464',
  p1465 = 'wdt:p1465',
  p1791 = 'wdt:p1791',
  p1740 = 'wdt:p1740',
  p2633 = 'wdt:p2633',
  p2184 = 'wdt:p2184',
  p948 = 'wdt:p948',
  p85 = 'wdt:p85',
  p163 = 'wdt:p163',
  p237 = 'wdt:p237',
  p36 = 'wdt:p36',
  p122 = 'wdt:p122',
}

export const sovereignStateShex = \`
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX sst: <https://www.wikidata.org/wiki/EntitySchema:E32#>

#all non-historical sovereign states
#SELECT ?item WHERE { ?item wdt:P31 wd:Q3624078 . OPTIONAL { ?item wdt:P576 ?end_time. } FILTER (!BOUND(?end_time)) }

sst:state EXTRA wdt:P31 {
  wdt:P31 [wd:Q3624078]; #instance of \\"sovereign state\\" and possibly other classes;
  wdt:P1448 LITERAL+; #has one or more official names in various languages
  wdt:P1705 LITERAL+; #has one or more native labels
  wdt:P487 LITERAL; #has Unicode character
  wdt:P30 EXTRA wdt:P31 {wdt:P31 [wd:Q5107]}; #exists on a continent
  wdt:P3896 IRI; #has geoshape
  wdt:P935 LITERAL; #has Commons gallery
  wdt:P373 LITERAL; #has Commons category
  wdt:P3722 LITERAL; #has Commons maps category
  wdt:P910 {wdt:P31 [wd:Q4167836]}; #has Wikipedia main category
  wdt:P5125 EXTRA wdt:P31 {wdt:P31 [wd:Q26884324]}; #has Wikipedia outline article
  wdt:P1151 {wdt:P31 [wd:Q4663903]}; #has Wikipedia portal
  wdt:P1792 {wdt:P31 [wd:Q4167836]}; #has category of associated people
  wdt:P1464 {wdt:P31 [wd:Q4167836]}; #has category of people born there
  wdt:P1465 {wdt:P31 [wd:Q4167836]}; #has category of people who died there
  wdt:P1791 {wdt:P31 [wd:Q4167836]}; #has category of people who are buried there
  wdt:P1740 {wdt:P31 [wd:Q4167836]}; #has category of films shot there
  wdt:P2633 {wdt:P31 [wd:Q46865913]}; #has geography article
  wdt:P2184 {wdt:P31 [wd:Q17544377]}; #has history article
  wdt:P948 IRI; #has page banner
  wdt:P85 EXTRA wdt:P31 {wdt:P31 [wd:Q23691]}; #has national anthem
  wdt:P163 EXTRA wdt:P31 {wdt:P31 [wd:Q186516]}; #has national flag
  wdt:P237 EXTRA wdt:P31 {wdt:P31 [wd:Q645466]}; #has national coat of arms
  wdt:P36 EXTRA wdt:P31 {wdt:P31 [wd:Q5119]}; #has capital city
  wdt:P122 EXTRA wdt:P31 {wdt:P31 [wd:Q1307214]}; #has form of government
}
\`;

export const state = new Shape<State, StateCreateArgs>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E32#state',
  shape: sovereignStateShex,
  context: StateContext,
});

export type WebService = {
  id: string; // the url of a node of this shape
  p31: P31Type.Q193424;
  p856?: string | string[];
  p571?: Date;
  p17?: \`http://www.wikidata.org/entity/\${string}\`;
  p154?:
    | \`http://commons.wikimedia.org/wiki/Special:FilePath/\${string}\`
    | \`http://commons.wikimedia.org/wiki/Special:FilePath/\${string}\`[];
  p178?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p407?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p366?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p127?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p348?: string;
  p275?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p373?: string;
  p137?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p159?: \`http://www.wikidata.org/entity/\${string}\`;
  p112?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p577?: Date;
  p138?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p1482?: string;
  p144?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p1581?: \`http://movatwitter.jugem.jp/\${string}\`;
  p1889?: \`http://www.wikidata.org/entity/\${string}\`;
  p751?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p4107?: string;
  p126?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p941?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p2283?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p2397?: string;
  p3984?: string | string[];
  p7306?: string;
  p3417?: string;
  p2088?: string;
  p2013?: string;
  p646?: string;
  p3393?: string;
};

export type WebServiceCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  p31: P31Type.Q193424;
  p856?: URL | NamedNode | (URL | NamedNode)[];
  p571?: Date | Literal;
  p17?: \`http://www.wikidata.org/entity/\${string}\`;
  p154?:
    | \`http://commons.wikimedia.org/wiki/Special:FilePath/\${string}\`
    | \`http://commons.wikimedia.org/wiki/Special:FilePath/\${string}\`[];
  p178?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p407?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p366?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p127?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p348?: string | Literal;
  p275?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p373?: string | Literal;
  p137?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p159?: \`http://www.wikidata.org/entity/\${string}\`;
  p112?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p577?: Date | Literal;
  p138?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p1482?: URL | NamedNode;
  p144?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p1581?: \`http://movatwitter.jugem.jp/\${string}\`;
  p1889?: \`http://www.wikidata.org/entity/\${string}\`;
  p751?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p4107?: string | Literal;
  p126?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p941?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p2283?:
    | \`http://www.wikidata.org/entity/\${string}\`
    | \`http://www.wikidata.org/entity/\${string}\`[];
  p2397?: string | Literal;
  p3984?: string | Literal | (string | Literal)[];
  p7306?: string | Literal;
  p3417?: string | Literal;
  p2088?: string | Literal;
  p2013?: string | Literal;
  p646?: string | Literal;
  p3393?: string | Literal;
};

export type WebServiceUpdateArgs = Partial<WebServiceCreateArgs>;

export enum P31Type {
  Q193424 = 'http://www.wikidata.org/entity/Q193424',
}

export enum WebServiceContext {
  p31 = 'p:p31',
  p856 = 'p:p856',
  p571 = 'p:p571',
  p17 = 'p:p17',
  p154 = 'p:p154',
  p178 = 'p:p178',
  p407 = 'p:p407',
  p366 = 'p:p366',
  p127 = 'p:p127',
  p348 = 'p:p348',
  p275 = 'p:p275',
  p373 = 'p:p373',
  p137 = 'p:p137',
  p159 = 'p:p159',
  p112 = 'p:p112',
  p577 = 'p:p577',
  p138 = 'p:p138',
  p1482 = 'p:p1482',
  p144 = 'p:p144',
  p1581 = 'p:p1581',
  p1889 = 'p:p1889',
  p751 = 'p:p751',
  p4107 = 'p:p4107',
  p126 = 'p:p126',
  p941 = 'p:p941',
  p2283 = 'p:p2283',
  p2397 = 'p:p2397',
  p3984 = 'p:p3984',
  p7306 = 'p:p7306',
  p3417 = 'p:p3417',
  p2088 = 'p:p2088',
  p2013 = 'p:p2013',
  p646 = 'p:p646',
  p3393 = 'p:p3393',
}

export const webServiceShex = \`
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX p: <http://www.wikidata.org/prop/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX wbs: <https://www.wikidata.org/wiki/EntitySchema:E141#>

wbs:web_service {
    # instance of
    wdt:P31 [ wd:Q193424 ]  ;
    # official website
    wdt:P856 IRI * ;
    # inception
    wdt:P571 xsd:dateTime ? ;
    # country
    wdt:P17 [ <http://www.wikidata.org/entity>~ ] ? ;
    # logo image
    wdt:P154 [ <http://commons.wikimedia.org/wiki/Special:FilePath>~ ] * ;
    # developer
    wdt:P178 [ <http://www.wikidata.org/entity>~ ] * ;
    # language of work or name
    wdt:P407 [ <http://www.wikidata.org/entity>~ ] * ;
    # use
    wdt:P366 [ <http://www.wikidata.org/entity>~ ] * ;
    # owned by
    wdt:P127 [ <http://www.wikidata.org/entity>~ ] * ;
    # software version identifier
    wdt:P348 xsd:string ? ;
    # license
    wdt:P275 [ <http://www.wikidata.org/entity>~ ] * ;
    # Commons category
    wdt:P373 xsd:string ? ;
    # operator
    wdt:P137 [ <http://www.wikidata.org/entity>~ ] * ;
    # headquarters location
    wdt:P159 [ <http://www.wikidata.org/entity>~ ] ? ;
    # founded by
    wdt:P112 [ <http://www.wikidata.org/entity>~ ] * ;
    # publication date
    wdt:P577 xsd:dateTime ? ;
    # named after
    wdt:P138 [ <http://www.wikidata.org/entity>~ ] * ;
    # Stack Exchange tag
    wdt:P1482 IRI ? ;
    # based on
    wdt:P144 [ <http://www.wikidata.org/entity>~ ] * ;
    # official blog
    wdt:P1581 [ <http://movatwitter.jugem.jp>~ ] ? ;
    # different from
    wdt:P1889 [ <http://www.wikidata.org/entity>~ ] ? ;
    # introduced feature
    wdt:P751 [ <http://www.wikidata.org/entity>~ ] * ;
    # Framalibre ID
    wdt:P4107 xsd:string ? ;
    # maintained by
    wdt:P126 [ <http://www.wikidata.org/entity>~ ] * ;
    # inspired by
    wdt:P941 [ <http://www.wikidata.org/entity>~ ] * ;
    # uses
    wdt:P2283 [ <http://www.wikidata.org/entity>~ ] * ;
    # YouTube channel ID
    wdt:P2397 xsd:string ? ;
    # subreddit
    wdt:P3984 xsd:string * ;   
    # Downdetector ID
    wdt:P7306 xsd:string ? ;
    # Quora topic ID
    wdt:P3417 xsd:string ? ;
    # Crunchbase organization ID
    wdt:P2088 xsd:string ? ;
    # Facebook ID
    wdt:P2013 xsd:string ? ;
    # Freebase ID
    wdt:P646 xsd:string ? ;
    # LittleSis organisation ID
    wdt:P3393 xsd:string ? ;
}
\`;

export const webService = new Shape<WebService, WebServiceCreateArgs>({
  id: 'https://www.wikidata.org/wiki/EntitySchema:E141#web_service',
  shape: webServiceShex,
  context: WebServiceContext,
});
",
]
`;

exports[`matches snapshots with custom imports 1`] = `
Array [
  "import { NamedNode, Literal } from 'rdflib';

import { Shape } from 'lalamethods';

export type SolidProfileShape = {
  id: string; // the url of a node of this shape
  vcardName?: string; // The formatted name of a person. Example: John Smith
  foafName?: string; // An alternate way to define a person's name.
  hasAddress?: AddressShape | AddressShape[]; // The person's street address.
  hasEmail?: EmailShape | EmailShape[]; // The person's email.
  hasPhoto?: string; // A link to the person's photo
  img?: string; // Photo link but in string form
  hasTelephone?: PhoneNumberShape | PhoneNumberShape[]; // Person's telephone number
  phone?: string; // An alternative way to define a person's telephone number using a string
  organizationName?: string; // The name of the organization with which the person is affiliated
  role?: string; // The name of the person's role in their organization
  trustedApp?: TrustedAppShape | TrustedAppShape[]; // A list of app origins that are trusted by this user
  key?: RsaPublicKeyShape | RsaPublicKeyShape[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: string; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: string; // The user's preferences
  storage?: string | string[]; // The location of a Solid storage server related to this WebId
  account?: string; // The user's account
  privateTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for public access)
  knows?: string | string[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  vcardName?: string | Literal; // The formatted name of a person. Example: John Smith
  foafName?: string | Literal; // An alternate way to define a person's name.
  hasAddress?:
    | URL
    | NamedNode
    | AddressShapeCreateArgs
    | (URL | NamedNode | AddressShapeCreateArgs)[]; // The person's street address.
  hasEmail?:
    | URL
    | NamedNode
    | EmailShapeCreateArgs
    | (URL | NamedNode | EmailShapeCreateArgs)[]; // The person's email.
  hasPhoto?: URL | NamedNode; // A link to the person's photo
  img?: string | Literal; // Photo link but in string form
  hasTelephone?:
    | URL
    | NamedNode
    | PhoneNumberShapeCreateArgs
    | (URL | NamedNode | PhoneNumberShapeCreateArgs)[]; // Person's telephone number
  phone?: string | Literal; // An alternative way to define a person's telephone number using a string
  organizationName?: string | Literal; // The name of the organization with which the person is affiliated
  role?: string | Literal; // The name of the person's role in their organization
  trustedApp?:
    | URL
    | NamedNode
    | TrustedAppShapeCreateArgs
    | (URL | NamedNode | TrustedAppShapeCreateArgs)[]; // A list of app origins that are trusted by this user
  key?:
    | URL
    | NamedNode
    | RsaPublicKeyShapeCreateArgs
    | (URL | NamedNode | RsaPublicKeyShapeCreateArgs)[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: URL | NamedNode; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: URL | NamedNode; // The user's preferences
  storage?: URL | NamedNode | (URL | NamedNode)[]; // The location of a Solid storage server related to this WebId
  account?: URL | NamedNode; // The user's account
  privateTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for public access)
  knows?: URL | NamedNode | (URL | NamedNode)[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeUpdateArgs = Partial<SolidProfileShapeCreateArgs>;

export type AddressShape = {
  id: string; // the url of a node of this shape
  countryName?: string; // The name of the user's country of residence
  locality?: string; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string; // The user's postal code
  region?: string; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string; // The user's street address
};

export type AddressShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  countryName?: string | Literal; // The name of the user's country of residence
  locality?: string | Literal; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string | Literal; // The user's postal code
  region?: string | Literal; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string | Literal; // The user's street address
};

export type AddressShapeUpdateArgs = Partial<AddressShapeCreateArgs>;

export type EmailShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeUpdateArgs = Partial<EmailShapeCreateArgs>;

export type PhoneNumberShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeUpdateArgs = Partial<PhoneNumberShapeCreateArgs>;

export type TrustedAppShape = {
  id: string; // the url of a node of this shape
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: string; // The app origin the user trusts
};

export type TrustedAppShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: URL | NamedNode; // The app origin the user trusts
};

export type TrustedAppShapeUpdateArgs = Partial<TrustedAppShapeCreateArgs>;

export type RsaPublicKeyShape = {
  id: string; // the url of a node of this shape
  modulus: string; // RSA Modulus
  exponent: number; // RSA Exponent
};

export type RsaPublicKeyShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  modulus: string | Literal; // RSA Modulus
  exponent: number | Literal; // RSA Exponent
};

export type RsaPublicKeyShapeUpdateArgs = Partial<RsaPublicKeyShapeCreateArgs>;

export enum SolidProfileShapeType {
  SchemPerson = 'http://schema.org/Person',
  FoafPerson = 'http://xmlns.com/foaf/0.1/Person',
}

export enum EmailShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum PhoneNumberShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum ModeType {
  Append = 'http://www.w3.org/ns/auth/acl#Append',
  Control = 'http://www.w3.org/ns/auth/acl#Control',
  Read = 'http://www.w3.org/ns/auth/acl#Read',
  Write = 'http://www.w3.org/ns/auth/acl#Write',
}

export enum SolidProfileShapeContext {
  type = 'rdf:type',
  vcardName = 'vcard:name',
  foafName = 'foaf:name',
  hasAddress = 'vcard:hasAddress',
  hasEmail = 'vcard:hasEmail',
  hasPhoto = 'vcard:hasPhoto',
  img = 'foaf:img',
  hasTelephone = 'vcard:hasTelephone',
  phone = 'vcard:phone',
  organizationName = 'vcard:organizationName',
  role = 'vcard:role',
  trustedApp = 'acl:trustedApp',
  key = 'cert:key',
  inbox = 'ldp:inbox',
  preferencesFile = 'sp:preferencesFile',
  storage = 'sp:storage',
  account = 'solid:account',
  privateTypeIndex = 'solid:privateTypeIndex',
  publicTypeIndex = 'solid:publicTypeIndex',
  knows = 'foaf:knows',
}

export enum AddressShapeContext {
  countryName = 'vcard:countryName',
  locality = 'vcard:locality',
  postalCode = 'vcard:postalCode',
  region = 'vcard:region',
  streetAddress = 'vcard:streetAddress',
}

export enum EmailShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum PhoneNumberShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum TrustedAppShapeContext {
  mode = 'acl:mode',
  origin = 'acl:origin',
}

export enum RsaPublicKeyShapeContext {
  modulus = 'cert:modulus',
  exponent = 'cert:exponent',
}

export const solidProfileShex = \`
PREFIX srs: <https://shaperepo.com/schemas/solidProfile#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schem: <http://schema.org/>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX acl: <http://www.w3.org/ns/auth/acl#>
PREFIX cert:  <http://www.w3.org/ns/auth/cert#>
PREFIX ldp: <http://www.w3.org/ns/ldp#>
PREFIX sp: <http://www.w3.org/ns/pim/space#>
PREFIX solid: <http://www.w3.org/ns/solid/terms#>

srs:SolidProfileShape EXTRA a {
  a [ schem:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from Schema.org)\\" ;
  a [ foaf:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from foaf)\\" ;
  vcard:name xsd:string ?
    // rdfs:comment  \\"The formatted name of a person. Example: John Smith\\" ;
  foaf:name xsd:string ?
    // rdfs:comment  \\"An alternate way to define a person's name.\\" ;
  vcard:hasAddress @srs:AddressShape *
    // rdfs:comment  \\"The person's street address.\\" ;
  vcard:hasEmail @srs:EmailShape *
    // rdfs:comment  \\"The person's email.\\" ;
  vcard:hasPhoto IRI ?
    // rdfs:comment  \\"A link to the person's photo\\" ;
  foaf:img xsd:string ?
    // rdfs:comment  \\"Photo link but in string form\\" ;
  vcard:hasTelephone @srs:PhoneNumberShape *
    // rdfs:comment  \\"Person's telephone number\\" ;
  vcard:phone xsd:string ?
    // rdfs:comment  \\"An alternative way to define a person's telephone number using a string\\" ;
  vcard:organization-name xsd:string ?
    // rdfs:comment  \\"The name of the organization with which the person is affiliated\\" ;
  vcard:role xsd:string ?
    // rdfs:comment  \\"The name of the person's role in their organization\\" ;
  acl:trustedApp @srs:TrustedAppShape *
    // rdfs:comment  \\"A list of app origins that are trusted by this user\\" ;
  cert:key @srs:RSAPublicKeyShape *
    // rdfs:comment  \\"A list of RSA public keys that are associated with private keys the user holds.\\" ;
  ldp:inbox IRI
    // rdfs:comment  \\"The user's LDP inbox to which apps can post notifications\\" ;
  sp:preferencesFile IRI ?
    // rdfs:comment  \\"The user's preferences\\" ;
  sp:storage IRI *
    // rdfs:comment  \\"The location of a Solid storage server related to this WebId\\" ;
  solid:account IRI ?
    // rdfs:comment  \\"The user's account\\" ;
  solid:privateTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for private access only)\\" ;
  solid:publicTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for public access)\\" ;
  foaf:knows IRI *
    // rdfs:comment  \\"A list of WebIds for all the people this user knows.\\" ;
}

srs:AddressShape {
  vcard:country-name xsd:string ?
    // rdfs:comment  \\"The name of the user's country of residence\\" ;
  vcard:locality xsd:string ?
    // rdfs:comment  \\"The name of the user's locality (City, Town etc.) of residence\\" ;
  vcard:postal-code xsd:string ?
    // rdfs:comment  \\"The user's postal code\\" ;
  vcard:region xsd:string ?
    // rdfs:comment  \\"The name of the user's region (State, Province etc.) of residence\\" ;
  vcard:street-address xsd:string ?
    // rdfs:comment  \\"The user's street address\\" ;
}

srs:EmailShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"The type of email.\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of an email as a mailto link (Example <mailto:jane@example.com>)\\" ;
}

srs:PhoneNumberShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"They type of Phone Number\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of a phone number as a tel link (Example <tel:555-555-5555>)\\" ;
}

srs:TrustedAppShape {
  acl:mode [acl:Append acl:Control acl:Read acl:Write] +
    // rdfs:comment  \\"The level of access provided to this origin\\" ;
  acl:origin IRI
    // rdfs:comment \\"The app origin the user trusts\\"
}

srs:RSAPublicKeyShape {
  cert:modulus xsd:string
    // rdfs:comment  \\"RSA Modulus\\" ;
  cert:exponent xsd:integer
    // rdfs:comment  \\"RSA Exponent\\" ;
}
\`;

export const solidProfile = new Shape<
  SolidProfileShape,
  SolidProfileShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#SolidProfileShape',
  shape: solidProfileShex,
  context: SolidProfileShapeContext,
  type: SolidProfileShapeType,
  childContexts: [
    AddressShapeContext,
    EmailShapeContext,
    PhoneNumberShapeContext,
    TrustedAppShapeContext,
    RsaPublicKeyShapeContext,
  ],
});

export const address = new Shape<AddressShape, AddressShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#AddressShape',
  shape: solidProfileShex,
  context: AddressShapeContext,
});

export const email = new Shape<EmailShape, EmailShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#EmailShape',
  shape: solidProfileShex,
  context: EmailShapeContext,
  type: EmailShapeType,
});

export const phoneNumber = new Shape<
  PhoneNumberShape,
  PhoneNumberShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#PhoneNumberShape',
  shape: solidProfileShex,
  context: PhoneNumberShapeContext,
  type: PhoneNumberShapeType,
});

export const trustedApp = new Shape<TrustedAppShape, TrustedAppShapeCreateArgs>(
  {
    id: 'https://shaperepo.com/schemas/solidProfile#TrustedAppShape',
    shape: solidProfileShex,
    context: TrustedAppShapeContext,
  },
);

export const rsaPublicKey = new Shape<
  RsaPublicKeyShape,
  RsaPublicKeyShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#RSAPublicKeyShape',
  shape: solidProfileShex,
  context: RsaPublicKeyShapeContext,
});
",
]
`;

exports[`matches snapshots without config file 1`] = `
Array [
  "import { NamedNode, Literal } from 'rdflib';

import { Shape } from 'shex-methods';

export type SolidProfileShape = {
  id: string; // the url of a node of this shape
  vcardName?: string; // The formatted name of a person. Example: John Smith
  foafName?: string; // An alternate way to define a person's name.
  hasAddress?: AddressShape | AddressShape[]; // The person's street address.
  hasEmail?: EmailShape | EmailShape[]; // The person's email.
  hasPhoto?: string; // A link to the person's photo
  img?: string; // Photo link but in string form
  hasTelephone?: PhoneNumberShape | PhoneNumberShape[]; // Person's telephone number
  phone?: string; // An alternative way to define a person's telephone number using a string
  organizationName?: string; // The name of the organization with which the person is affiliated
  role?: string; // The name of the person's role in their organization
  trustedApp?: TrustedAppShape | TrustedAppShape[]; // A list of app origins that are trusted by this user
  key?: RsaPublicKeyShape | RsaPublicKeyShape[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: string; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: string; // The user's preferences
  storage?: string | string[]; // The location of a Solid storage server related to this WebId
  account?: string; // The user's account
  privateTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: string | string[]; // A registry of all types used on the user's Pod (for public access)
  knows?: string | string[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  vcardName?: string | Literal; // The formatted name of a person. Example: John Smith
  foafName?: string | Literal; // An alternate way to define a person's name.
  hasAddress?:
    | URL
    | NamedNode
    | AddressShapeCreateArgs
    | (URL | NamedNode | AddressShapeCreateArgs)[]; // The person's street address.
  hasEmail?:
    | URL
    | NamedNode
    | EmailShapeCreateArgs
    | (URL | NamedNode | EmailShapeCreateArgs)[]; // The person's email.
  hasPhoto?: URL | NamedNode; // A link to the person's photo
  img?: string | Literal; // Photo link but in string form
  hasTelephone?:
    | URL
    | NamedNode
    | PhoneNumberShapeCreateArgs
    | (URL | NamedNode | PhoneNumberShapeCreateArgs)[]; // Person's telephone number
  phone?: string | Literal; // An alternative way to define a person's telephone number using a string
  organizationName?: string | Literal; // The name of the organization with which the person is affiliated
  role?: string | Literal; // The name of the person's role in their organization
  trustedApp?:
    | URL
    | NamedNode
    | TrustedAppShapeCreateArgs
    | (URL | NamedNode | TrustedAppShapeCreateArgs)[]; // A list of app origins that are trusted by this user
  key?:
    | URL
    | NamedNode
    | RsaPublicKeyShapeCreateArgs
    | (URL | NamedNode | RsaPublicKeyShapeCreateArgs)[]; // A list of RSA public keys that are associated with private keys the user holds.
  inbox: URL | NamedNode; // The user's LDP inbox to which apps can post notifications
  preferencesFile?: URL | NamedNode; // The user's preferences
  storage?: URL | NamedNode | (URL | NamedNode)[]; // The location of a Solid storage server related to this WebId
  account?: URL | NamedNode; // The user's account
  privateTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for private access only)
  publicTypeIndex?: URL | NamedNode | (URL | NamedNode)[]; // A registry of all types used on the user's Pod (for public access)
  knows?: URL | NamedNode | (URL | NamedNode)[]; // A list of WebIds for all the people this user knows.
} & {
  type: SolidProfileShapeType.SchemPerson | SolidProfileShapeType.FoafPerson; // Defines the node as a Person (from foaf)
};

export type SolidProfileShapeUpdateArgs = Partial<SolidProfileShapeCreateArgs>;

export type AddressShape = {
  id: string; // the url of a node of this shape
  countryName?: string; // The name of the user's country of residence
  locality?: string; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string; // The user's postal code
  region?: string; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string; // The user's street address
};

export type AddressShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  countryName?: string | Literal; // The name of the user's country of residence
  locality?: string | Literal; // The name of the user's locality (City, Town etc.) of residence
  postalCode?: string | Literal; // The user's postal code
  region?: string | Literal; // The name of the user's region (State, Province etc.) of residence
  streetAddress?: string | Literal; // The user's street address
};

export type AddressShapeUpdateArgs = Partial<AddressShapeCreateArgs>;

export type EmailShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of an email as a mailto link (Example <mailto:jane@example.com>)
} & {
  type?:
    | EmailShapeType.Dom
    | EmailShapeType.Home
    | EmailShapeType.Isdn
    | EmailShapeType.Internet
    | EmailShapeType.Intl
    | EmailShapeType.Label
    | EmailShapeType.Parcel
    | EmailShapeType.Postal
    | EmailShapeType.Pref
    | EmailShapeType.Work
    | EmailShapeType.X400; // The type of email.
};

export type EmailShapeUpdateArgs = Partial<EmailShapeCreateArgs>;

export type PhoneNumberShape = {
  id: string; // the url of a node of this shape
  value: string; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  value: URL | NamedNode; // The value of a phone number as a tel link (Example <tel:555-555-5555>)
} & {
  type?:
    | PhoneNumberShapeType.Dom
    | PhoneNumberShapeType.Home
    | PhoneNumberShapeType.Isdn
    | PhoneNumberShapeType.Internet
    | PhoneNumberShapeType.Intl
    | PhoneNumberShapeType.Label
    | PhoneNumberShapeType.Parcel
    | PhoneNumberShapeType.Postal
    | PhoneNumberShapeType.Pref
    | PhoneNumberShapeType.Work
    | PhoneNumberShapeType.X400; // They type of Phone Number
};

export type PhoneNumberShapeUpdateArgs = Partial<PhoneNumberShapeCreateArgs>;

export type TrustedAppShape = {
  id: string; // the url of a node of this shape
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: string; // The app origin the user trusts
};

export type TrustedAppShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  mode:
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)
    | (ModeType.Append | ModeType.Control | ModeType.Read | ModeType.Write)[]; // The level of access provided to this origin
  origin: URL | NamedNode; // The app origin the user trusts
};

export type TrustedAppShapeUpdateArgs = Partial<TrustedAppShapeCreateArgs>;

export type RsaPublicKeyShape = {
  id: string; // the url of a node of this shape
  modulus: string; // RSA Modulus
  exponent: number; // RSA Exponent
};

export type RsaPublicKeyShapeCreateArgs = {
  id?: string | NamedNode; // the url to match or create the node with e.g. 'https://example.com#this', 'https://example.com/profile/card#me'
  modulus: string | Literal; // RSA Modulus
  exponent: number | Literal; // RSA Exponent
};

export type RsaPublicKeyShapeUpdateArgs = Partial<RsaPublicKeyShapeCreateArgs>;

export enum SolidProfileShapeType {
  SchemPerson = 'http://schema.org/Person',
  FoafPerson = 'http://xmlns.com/foaf/0.1/Person',
}

export enum EmailShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum PhoneNumberShapeType {
  Dom = 'http://www.w3.org/2006/vcard/ns#Dom',
  Home = 'http://www.w3.org/2006/vcard/ns#Home',
  Isdn = 'http://www.w3.org/2006/vcard/ns#ISDN',
  Internet = 'http://www.w3.org/2006/vcard/ns#Internet',
  Intl = 'http://www.w3.org/2006/vcard/ns#Intl',
  Label = 'http://www.w3.org/2006/vcard/ns#Label',
  Parcel = 'http://www.w3.org/2006/vcard/ns#Parcel',
  Postal = 'http://www.w3.org/2006/vcard/ns#Postal',
  Pref = 'http://www.w3.org/2006/vcard/ns#Pref',
  Work = 'http://www.w3.org/2006/vcard/ns#Work',
  X400 = 'http://www.w3.org/2006/vcard/ns#X400',
}

export enum ModeType {
  Append = 'http://www.w3.org/ns/auth/acl#Append',
  Control = 'http://www.w3.org/ns/auth/acl#Control',
  Read = 'http://www.w3.org/ns/auth/acl#Read',
  Write = 'http://www.w3.org/ns/auth/acl#Write',
}

export enum SolidProfileShapeContext {
  type = 'rdf:type',
  vcardName = 'vcard:name',
  foafName = 'foaf:name',
  hasAddress = 'vcard:hasAddress',
  hasEmail = 'vcard:hasEmail',
  hasPhoto = 'vcard:hasPhoto',
  img = 'foaf:img',
  hasTelephone = 'vcard:hasTelephone',
  phone = 'vcard:phone',
  organizationName = 'vcard:organizationName',
  role = 'vcard:role',
  trustedApp = 'acl:trustedApp',
  key = 'cert:key',
  inbox = 'ldp:inbox',
  preferencesFile = 'sp:preferencesFile',
  storage = 'sp:storage',
  account = 'solid:account',
  privateTypeIndex = 'solid:privateTypeIndex',
  publicTypeIndex = 'solid:publicTypeIndex',
  knows = 'foaf:knows',
}

export enum AddressShapeContext {
  countryName = 'vcard:countryName',
  locality = 'vcard:locality',
  postalCode = 'vcard:postalCode',
  region = 'vcard:region',
  streetAddress = 'vcard:streetAddress',
}

export enum EmailShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum PhoneNumberShapeContext {
  type = 'rdf:type',
  value = 'vcard:value',
}

export enum TrustedAppShapeContext {
  mode = 'acl:mode',
  origin = 'acl:origin',
}

export enum RsaPublicKeyShapeContext {
  modulus = 'cert:modulus',
  exponent = 'cert:exponent',
}

export const solidProfileShex = \`
PREFIX srs: <https://shaperepo.com/schemas/solidProfile#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schem: <http://schema.org/>
PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX acl: <http://www.w3.org/ns/auth/acl#>
PREFIX cert:  <http://www.w3.org/ns/auth/cert#>
PREFIX ldp: <http://www.w3.org/ns/ldp#>
PREFIX sp: <http://www.w3.org/ns/pim/space#>
PREFIX solid: <http://www.w3.org/ns/solid/terms#>

srs:SolidProfileShape EXTRA a {
  a [ schem:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from Schema.org)\\" ;
  a [ foaf:Person ]
    // rdfs:comment  \\"Defines the node as a Person (from foaf)\\" ;
  vcard:name xsd:string ?
    // rdfs:comment  \\"The formatted name of a person. Example: John Smith\\" ;
  foaf:name xsd:string ?
    // rdfs:comment  \\"An alternate way to define a person's name.\\" ;
  vcard:hasAddress @srs:AddressShape *
    // rdfs:comment  \\"The person's street address.\\" ;
  vcard:hasEmail @srs:EmailShape *
    // rdfs:comment  \\"The person's email.\\" ;
  vcard:hasPhoto IRI ?
    // rdfs:comment  \\"A link to the person's photo\\" ;
  foaf:img xsd:string ?
    // rdfs:comment  \\"Photo link but in string form\\" ;
  vcard:hasTelephone @srs:PhoneNumberShape *
    // rdfs:comment  \\"Person's telephone number\\" ;
  vcard:phone xsd:string ?
    // rdfs:comment  \\"An alternative way to define a person's telephone number using a string\\" ;
  vcard:organization-name xsd:string ?
    // rdfs:comment  \\"The name of the organization with which the person is affiliated\\" ;
  vcard:role xsd:string ?
    // rdfs:comment  \\"The name of the person's role in their organization\\" ;
  acl:trustedApp @srs:TrustedAppShape *
    // rdfs:comment  \\"A list of app origins that are trusted by this user\\" ;
  cert:key @srs:RSAPublicKeyShape *
    // rdfs:comment  \\"A list of RSA public keys that are associated with private keys the user holds.\\" ;
  ldp:inbox IRI
    // rdfs:comment  \\"The user's LDP inbox to which apps can post notifications\\" ;
  sp:preferencesFile IRI ?
    // rdfs:comment  \\"The user's preferences\\" ;
  sp:storage IRI *
    // rdfs:comment  \\"The location of a Solid storage server related to this WebId\\" ;
  solid:account IRI ?
    // rdfs:comment  \\"The user's account\\" ;
  solid:privateTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for private access only)\\" ;
  solid:publicTypeIndex IRI *
    // rdfs:comment  \\"A registry of all types used on the user's Pod (for public access)\\" ;
  foaf:knows IRI *
    // rdfs:comment  \\"A list of WebIds for all the people this user knows.\\" ;
}

srs:AddressShape {
  vcard:country-name xsd:string ?
    // rdfs:comment  \\"The name of the user's country of residence\\" ;
  vcard:locality xsd:string ?
    // rdfs:comment  \\"The name of the user's locality (City, Town etc.) of residence\\" ;
  vcard:postal-code xsd:string ?
    // rdfs:comment  \\"The user's postal code\\" ;
  vcard:region xsd:string ?
    // rdfs:comment  \\"The name of the user's region (State, Province etc.) of residence\\" ;
  vcard:street-address xsd:string ?
    // rdfs:comment  \\"The user's street address\\" ;
}

srs:EmailShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"The type of email.\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of an email as a mailto link (Example <mailto:jane@example.com>)\\" ;
}

srs:PhoneNumberShape EXTRA a {
  a [
    vcard:Dom
    vcard:Home
    vcard:ISDN
    vcard:Internet
    vcard:Intl
    vcard:Label
    vcard:Parcel
    vcard:Postal
    vcard:Pref
    vcard:Work
    vcard:X400
  ] ?
    // rdfs:comment  \\"They type of Phone Number\\" ;
  vcard:value IRI
    // rdfs:comment  \\"The value of a phone number as a tel link (Example <tel:555-555-5555>)\\" ;
}

srs:TrustedAppShape {
  acl:mode [acl:Append acl:Control acl:Read acl:Write] +
    // rdfs:comment  \\"The level of access provided to this origin\\" ;
  acl:origin IRI
    // rdfs:comment \\"The app origin the user trusts\\"
}

srs:RSAPublicKeyShape {
  cert:modulus xsd:string
    // rdfs:comment  \\"RSA Modulus\\" ;
  cert:exponent xsd:integer
    // rdfs:comment  \\"RSA Exponent\\" ;
}
\`;

export const solidProfile = new Shape<
  SolidProfileShape,
  SolidProfileShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#SolidProfileShape',
  shape: solidProfileShex,
  context: SolidProfileShapeContext,
  type: SolidProfileShapeType,
  childContexts: [
    AddressShapeContext,
    EmailShapeContext,
    PhoneNumberShapeContext,
    TrustedAppShapeContext,
    RsaPublicKeyShapeContext,
  ],
});

export const address = new Shape<AddressShape, AddressShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#AddressShape',
  shape: solidProfileShex,
  context: AddressShapeContext,
});

export const email = new Shape<EmailShape, EmailShapeCreateArgs>({
  id: 'https://shaperepo.com/schemas/solidProfile#EmailShape',
  shape: solidProfileShex,
  context: EmailShapeContext,
  type: EmailShapeType,
});

export const phoneNumber = new Shape<
  PhoneNumberShape,
  PhoneNumberShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#PhoneNumberShape',
  shape: solidProfileShex,
  context: PhoneNumberShapeContext,
  type: PhoneNumberShapeType,
});

export const trustedApp = new Shape<TrustedAppShape, TrustedAppShapeCreateArgs>(
  {
    id: 'https://shaperepo.com/schemas/solidProfile#TrustedAppShape',
    shape: solidProfileShex,
    context: TrustedAppShapeContext,
  },
);

export const rsaPublicKey = new Shape<
  RsaPublicKeyShape,
  RsaPublicKeyShapeCreateArgs
>({
  id: 'https://shaperepo.com/schemas/solidProfile#RSAPublicKeyShape',
  shape: solidProfileShex,
  context: RsaPublicKeyShapeContext,
});
",
]
`;
